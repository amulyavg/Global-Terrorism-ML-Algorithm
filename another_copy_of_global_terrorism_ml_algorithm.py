# -*- coding: utf-8 -*-
"""Another copy of Global Terrorism ML Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sBLht1pwsW9Y10adP_rxht1BGVaTLq3i
"""

!unzip terrorismdata.zip

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV

# Load the dataset
df = pd.read_csv('/content/globalterrorismdb_0718dist.csv', encoding='ISO-8859-1')

# Filter data for the US
df_us = df[df['country_txt'] == 'United States']

# Select only numeric columns and handle missing values
numeric_df = df_us.select_dtypes(include=[np.number])

# Fill missing values with the column mean
numeric_df = numeric_df.fillna(numeric_df.mean())

# Remove columns with too many missing values (if any)
threshold = 0.5  # 50% threshold for missing values
missing_percentages = numeric_df.isnull().mean()
columns_to_drop = missing_percentages[missing_percentages > threshold].index
numeric_df.drop(columns=columns_to_drop, inplace=True)

# Remove highly correlated features
corr_matrix = numeric_df.corr().abs()
upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool))
columns_to_remove = [column for column in upper.columns if any(upper[column] > 0.85)]
df_reduced = numeric_df.drop(columns=columns_to_remove)

# Standardize the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df_reduced)

# Perform PCA
pca = PCA()
principal_components = pca.fit_transform(scaled_data)

# Determine the number of components to retain (for example, retaining components that explain 95% of the variance)
explained_variance_ratio = np.cumsum(pca.explained_variance_ratio_)
n_components = np.argmax(explained_variance_ratio >= 0.95) + 1

# Perform PCA with the chosen number of components
pca = PCA(n_components=n_components)
principal_components = pca.fit_transform(scaled_data)

# Create a DataFrame with the principal components
pca_df = pd.DataFrame(data=principal_components, index=df_reduced.index)

# Add the target variable (number of deaths)
pca_df['nkill'] = df_us['nkill'].values

# Drop rows with missing values in the target
pca_df = pca_df.dropna(subset=['nkill'])

# Split the data into training and testing sets (80% train, 20% test)
split_index = int(len(pca_df) * 0.8)
train_data = pca_df[:split_index]
test_data = pca_df[split_index:]

X_train = train_data.drop('nkill', axis=1)
y_train = train_data['nkill']
X_test = test_data.drop('nkill', axis=1)
y_test = test_data['nkill']

# Define the parameter grid for Gradient Boosting
param_grid = {
    'n_estimators': [100, 200],
    'learning_rate': [0.01, 0.1, 0.2],
    'max_depth': [3, 4, 5]
}

# Initialize the Gradient Boosting model
gb_model = GradientBoostingRegressor(random_state=42)

# Initialize Grid Search
grid_search = GridSearchCV(estimator=gb_model, param_grid=param_grid, cv=3, scoring='neg_mean_squared_error', n_jobs=-1)

# Fit the model
grid_search.fit(X_train, y_train)

# Best parameters and best model
best_params = grid_search.best_params_
best_model = grid_search.best_estimator_

# Make predictions
y_pred = best_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Best Parameters: {best_params}')
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Plot the forecasted number of deaths vs. actual number of deaths
plt.figure(figsize=(14, 7))
plt.plot(y_test.values, label='Actual Deaths', color='blue', marker='o', linestyle='-', markersize=5, alpha=0.7)
plt.plot(y_pred, label='Forecasted Deaths', color='red', marker='x', linestyle='--', markersize=5, alpha=0.7)
plt.title('Actual vs Forecasted Number of Terrorist Deaths in the US')
plt.xlabel('Time')
plt.ylabel('Number of Deaths')
plt.legend()
plt.grid(True)
plt.show()

# Plot residuals
residuals = y_test - y_pred

plt.figure(figsize=(14, 7))
plt.scatter(y_test, residuals, alpha=0.7, color='blue')
plt.axhline(y=0, color='red', linestyle='--', linewidth=2)
plt.title('Residual Plot')
plt.xlabel('Actual Deaths')
plt.ylabel('Residuals')
plt.grid(True)
plt.show()